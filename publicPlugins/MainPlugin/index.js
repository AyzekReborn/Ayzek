import {AyzekPlugin,command} from '../../';
import {createContext, runInContext} from 'vm';

const PLUGINS_HELP=`/plugins - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤\n/plugins disable <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞\n/plugins enable <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–≥–Ω–∞`;

export default class MainPlugin extends AyzekPlugin{
    static description='–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏.';
    @command({
        names: ['plugins', '–ø–ª–∞–≥–∏–Ω—ã'],
        helpMessage: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤'
    })
    async plugins(msg, args) {
        if(args.length!==0){
            if(args[0]==='disable'){

            }else if(args[0]==='enable'){

            }else{
                await msg.sendText(true, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n'+PLUGINS_HELP);
            }
        }else{
            let bot=this.bot;
            let plugins=bot.plugins.reduce((a,b)=>[...a,...b]).sort(comparePluginName).map(pl=>[pl.constructor.name,pl.constructor.author,pl.constructor.description]);
            let descs=plugins.map(([name,author,desc],id)=>`üìï${name} –æ—Ç ${author}\n   ${desc}\n`).join('');
            descs=descs.replace(/DOT/g,'.');
            await msg.sendText(true, descs+'\n'+PLUGINS_HELP);
        }
    }
    @command({
        names: ['help', 'commands', '–∫–æ–º–∞–Ω–¥—ã','–ø–æ–º–æ—â—å','—Å–ø—Ä–∞–≤–∫–∞'],
        helpMessage: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤'
    })
    async help(msg, args) {
        let bot=this.bot;
        let plugins=bot.plugins.reduce((a,b)=>[...a,...b]).sort(comparePluginName);
        let descs=``;
        plugins.forEach((plugin,id)=>{
            descs+=`üìï${plugin.constructor.name||'–ü–ª–∞–≥–∏–Ω –±–µ–∑ –∏–º–µ–Ω–∏'} –æ—Ç ${plugin.constructor.author||'–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'}\n`;
            plugin.handlers.commands.map(command=>`   üöå${command.names.map(cmd=>`${msg.commandPrefix}${cmd}`).sort().join(', ')} - ${command.helpMessage}`).sort().forEach(cmd=>{
                descs+=`${cmd}\n`;
            });
            plugin.handlers.regex.map(regex=>`   ü§î${regex.regexes.map(regex=>regex.toString())} - ${regex.helpMessage}`).sort().forEach(regex=>{
                descs+=`${regex}\n`;
            });
        });
        descs=descs.replace(/DOT/g,'.');
        msg.sendText(true, descs);
    }
    @command({
        names: ['timings'],
        helpMessage: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–π–º–∏–Ω–≥–æ–≤'
    })
    timings(msg,args){
        let total=0;
        let all=msg.timing.data.map(([name,start,stop,time])=>{
            total+=time;
            return `${name} - ${time}n`;
        }).join(',\n');
        msg.sendText(false,`${all}\n–í—Å–µ–≥–æ: ${total}n`);
    }
    @command({
        names: ['eval'],
        helpMessage: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π js –∫–æ–¥. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞',
        filter(user,chat,sourceApi){
            return user.isSrtMember
        }
    })
    async eval(msg,args){
        const sandbox = {
            msg
        };
        createContext(sandbox);
        runInContext(msg.text.substr(5), sandbox);
        delete sandbox.msg;
        if(sandbox.a)
            sandbox.a='–¢–≤–æ—è –º–∞–º–∫–∞';
        await msg.sendText(false,JSON.stringify(sandbox,null,4));
    }
}

function comparePluginName(a,b) {
    if (a.constructor.name < b.constructor.name)
        return -1;
    if (a.constructor.name > b.constructor.name)
        return 1;
    return 0;
}
